<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="DashboardDAO">
	<!-- 활동 로그 조회 -->
	<resultMap type="com.dd.devdeveloper.dashboard.ActivityLogVO" id="ActivityLogMap">
		<result column="activity_Date" property="activityDate" />
		<result column="activity_Score" property="activityScore"/>
	</resultMap>
	<select id="getActivityLogList"
			statementType="CALLABLE"
			parameterType="com.dd.devdeveloper.dashboard.DashboardVO">
		{ CALL active_log_select(
			#{memberNo}, 
			#{activityLogList, mode=OUT, jdbcType=CURSOR, javaType=java.sql.ResultSet, resultMap=ActivityLogMap }
		) }
	</select>
	
	<!-- 대시보드 프로필 정보 조회 -->
	<select id="getMembers" parameterType="members" resultType="members">
		select 	members_no, 
				members_id, 
				members_name, 
				members_image, 
				members_addr, 
				members_mail,
				members_grade 
		from members 
		where MEMBERS_NO = #{membersNo}
	</select>
	
	<!-- 프로젝트 지원 상태 조회 -->
	<select id="getProjApplyStatus" parameterType = "dashboard" resultType="dashboard">
		select 	(select count(*) from proj_applicants where members_no=#{memberNo} AND status='지원') proj_apply,
          		(select count(*) from proj_applicants where members_no=#{memberNo} AND status='승인') proj_approve,
          		(select count(*) from proj_applicants where members_no=#{memberNo} AND status='참여') proj_participant
		from dual
	</select>
	
	<!-- 회원의 프로젝트 지원상태 상세 -->
	<select id="getProjStatusDetail" parameterType="projApplicants" resultType="projApplicants">
		select  a.proj_no   "projNo",
          		b.proj_title  "projTitle", 
          		a.apply_no "applyNo"
		from PROJ_APPLICANTS a join PROJECTS b 
                               on a.proj_no = b.proj_no 
		where a.members_no=#{membersNo} 
		and a.status=#{status}
	</select>
	
	<!-- 회원의 프로젝트 지원 취소 -->
	<delete id="deleteApply" parameterType="projApplicants">
		delete PROJ_APPLICANTS where apply_no=#{applyNo}
	</delete>
	
	<!-- 프로젝트 승인 확인 -->
	<update id="updateApplyParticipantIn" parameterType="projApplicants">
		update PROJ_APPLICANTS set status='참여' where apply_no=#{applyNo}
	</update>
	
	<!-- 프로젝트 지원 승인 -->
	<update id="updateApplytoApproved" parameterType="projApplicants">
		update PROJ_APPLICANTS set status='승인' where apply_no=#{applyNo}
	</update>
	
	
	<!-- 프로젝트 지원자 리스트 -->
	<select id="getProjApplicantsList" parameterType="projApplicants" resultType="projApplicants">
		select apply_no, 
				members_no, 
        proj_no, 
				status, 
        participant_name,
				email,
				phone_no,
				address,
				cover_letter,
        members_image,
        members_id,
       case when success_to_do>0 then round((success_to_do/total_to_do)*100) else 0 end progress
from (
select 	p.apply_no, 
				p.members_no, 
				p.proj_no, 
				p.status, 
				p.participant_name,
				p.email,
				p.phone_no,
				p.address,
				p.cover_letter,
        		m.members_image,
        		m.members_id,
            (select  count(*) from proj_calendar where proj_no=p.proj_no and developer_no=m.members_no) total_to_do,
            (select count(*) from proj_calendar where proj_no=p.proj_no and developer_no=m.members_no and task_complete='y') success_to_do
		from PROJ_APPLICANTS_STATUS_VIEW p join members m
    	on p.members_no = m.members_no
		where proj_no in ( select proj_no from PROJECTS where members_no= #{pmNo})
		order by status_no) a
	</select>
	
	<!-- 내가 올린 프로젝트 리스트 가져오기 -->
	<select id="getMyProjects" parameterType="projects" resultType="projects">
		select 	proj_no, 
				proj_title, 
				proj_members_cnt, 
				proj_store_url 
		from PROJECTS 
		where members_no=#{membersNo}
	</select>
	
</mapper>

