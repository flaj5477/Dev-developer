<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="FilesDAO">
	
	<select id="getFilesRoute" resultType="files" parameterType="files">
		
		SELECT files_no, proj_no, files_title, level
		FROM files
		START WITH files_no = #{upperFolder}
		CONNECT BY PRIOR upper_folder = files_no
		order by level desc
	</select>

	<select id="getFilesList" resultType="files">
		SELECT B.* FROM ( SELECT A.*,ROWNUM RN FROM(
		select files_no,
		proj_no,
		files_title,
		files_comment,
		f.members_no,
		files_group_no,
		files_upload_date,
		files_type,
		upper_folder,
		files_size,
		files_Import,
		files_Trash,
		m.members_name
		from
		files f inner join members m on f.members_no = m.members_no
		<![CDATA[
		where (files_Trash <> 'Y' or files_Trash is null)
		]]>
		<choose>
			<when test="upperFolder == null or upperFolder ==''">
				and upper_folder is null
				and proj_no = #{projNo}
			</when>
			<otherwise>
			 <![CDATA[
				 and upper_folder <> files_no
				and upper_folder = #{upperFolder}
			]]>
			</otherwise>
		</choose>
		order by files_no
		)A)B WHERE RN between #{first} and #{last}
	</select>

	<!-- filesinsert(upload) -->
	<insert id="filesInsertProc" statementType="CALLABLE" parameterType="files">
		{call FILES_UPLOAD		(#{projNo},
								 #{membersNo},
								 #{filesTitle},
								 #{filesComment},
								 #{filesPath},
								 #{upperFolder},
								 #{filesType},
								 #{filesSize} )}							 
	</insert>
		
	<select id="getImportList" parameterType="files"
		resultType="files">
		select files_no,
		files_title,
		files_comment,
		f.members_no,
		files_group_no,
		files_upload_date,
		upper_folder,
		files_type,
		files_Import,
		files_Trash,
		m.members_name
		from
		files f inner join members m on f.members_no = m.members_no
		where files_Import='Y'
	</select>
	
	<select id="getTrashList" parameterType="files"
		resultType="files">
		select files_no,
		files_title,
		files_comment,
		f.members_no,
		files_group_no,
		files_upload_date,
		upper_folder,
		files_type,
		files_Import,
		files_Trash,
		m.members_name
		from
		files f inner join members m on f.members_no = m.members_no
		where files_Trash='Y'
	</select>

	<select id="getFilesSearch" parameterType="files"
		resultType="files">
		select *
		from files
		where proj_no = #{projNo}
			<if test="searchVal != null and searchVal != '' ">
				<if test="select == 'title'">
					AND FILES_TITLE LIKE '%' || #{searchVal} || '%'
				</if>
				<if test="select == 'userNo'">
					AND  MEMBERS_NO LIKE '%' || #{searchVal} || '%'
				</if>
			</if>
	</select>
	
	<select id="getCountFiles" parameterType="files"
		resultType="int">
		select count(*) as "getCountFiles"
		from files
		where proj_no = #{projNo}
			<if test="searchVal != null and searchVal != '' ">
				<if test="select == 'title'">
					AND FILES_TITLE LIKE '%' || #{searchVal} || '%'
				</if>
				<if test="select == 'userNo'">
					AND  MEMBERS_NO LIKE '%' || #{searchVal} || '%'
				</if>
			</if>
	</select>

	<update id="filesImport" parameterType="files">
		update files
		set
		files_import = case when files_import = 'Y' then 'N'
							when files_import is null or files_import = 'N' then 'Y' end
		where files_no = ${filesNo}
	</update>

	<update id="filesTrash" parameterType="files">
		update files
		set
		files_trash = case when files_trash = 'Y' then 'N'
							when files_trash is null or files_trash = 'N' then 'Y' end
		where files_no = ${filesNo}
	</update>
	
	<!-- 삭제  -->
	  <delete id="deleteFiles" parameterType="files">
	  	delete files
	  	where files_no = ${filesNo}
	  </delete>
	  
	<!-- 다운로드시 단건 조회 -->
	<select id="getFiles" resultType="files" parameterType = "files">
		select * 
		from files 
		where files_no = #{filesNo}
	</select>
	
</mapper>